# 编码是一个让人头疼的问题，计算机只能处理数字，要处理其它数据就需要使用不同的编码来把它转换成数字
# 最小单位 bit（比特） ，byte（字节），8 bit = 1 byte
# 1 byte 能表示的最大整数是 255 ， 2 byte 能表示的最大整数是 65535
# 美国人发明计算机，最早只有127个字符被编码到计算机，也就是大小写英文字母、数字和一些符号，这就是ASCII编码
# unicode编码是把所有语言都统一到一套编码里，常用的字符使用两个byte（字节）表示，非常偏僻的字符使用四个byte（字节）表示
# UTF-8编码是对unicode编码的改进，常用英文字母被编码成一个byte（字节），汉字通常是三个byte（字节），——
# 只有很生僻的字符才会被编码成4-6个byte（字节）
print('包含中文的str')

# 对于单个字符的编码，python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
ord('A')
ord('中')
chr(66)
chr(25991)

# python对bytes类型的数据用带b前缀的单引号或双引号表示
x = b'ABC'

# 计算str包含多少个字符，可以用len()函数
len('ABC')
len('中文')

# len()函数计算字节数
len(b'ABC')

# python源代码是一个文本文件，当你的源代码中包含中文的时候，在保存源代码时，需要务必指定保存为UTF-8编码。
# 当python解释器读取源代码时，为了让它按UTF-8编码读取，在文件开头写上以下两行
#!/usr/bin/env python3  #告诉linux/osx系统，这是一个python可执行程序，windows系统会忽略这个注释
# -*- coding: utf-8 -*- #告诉python解释器，按照utf-8编码读取源代码

# 格式化，python中采用的格式化方式和C语言是一致的，用%实现,%d整数，%f浮点数，%s字符串，%x十六进制整数
print('hello,%s'%'world')
print('hi,%s,you have $%d.'%('mihael',10000))

# 格式化整数和浮点数可以指定是否补0和整数与小数的位数
print('%2d-%02d'%(3,1))
print('%.2f'%3.1415926)

# 练习，小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
s1 = 72
s2 = 85
r = s2/s1
print('小明成绩提升了%.1f%%'%r)