# 切片
# 取一个 list 或 tuple 的部分元素是非常常见的操作。
L = ['Michael','Sarah','Tracy','Bob','Jack']
# 取前3个元素，笨办法：
print(L[0],L[1],L[2])
# 之所以是笨办法是因为扩展一下，取前N个元素就没辙了。
# 取前N个元素，也就是索引为 0-(N-1) 的元素，可以用循环：
r = []
n = 3
for i in range(n):
    r.append(L[i])
print(r)
# 对这种经常取指定索引范围的操作，用循环十分繁琐，因此，python提供了切片 (Slice) 操作符，能大大简化这种操作。

# 对应上面的问题，取前3个元素，用一行代码就可以完成切片：
print(L[0:3])
# L[0:3] 表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0,1,2,正好是3个元素。
# 如果第一个索引是0，还可以省略：
print(L[:3])
# 也可以从索引1开始，取出2个元素出来：
print(L[1:3])
# 类似的，既然python支持 L[-1] 取倒数第一个元素，那么它同样支持倒数切片
print(L[-2])
print(L[-2:-1])

## 记住倒数第一个元素的索引是 -1
# 切片操作十分有用。
# 例子，创建一个 0-99 的数列
L = list(range(100))
print(L)
# 通过切片轻松取出某一段数列,前10个：
print(L[:10])
# 后10个数：
print(L[-10:])
# 前11-20个数：
print(L[11:20])
# 前10个数，每两个取一个：
print(L[:10:2])
# 所有数，每5个取一个：
print(L[::5])
# 甚至什么都不写，只写 [:] 就可以原样复制一个 list ：
print(L[:])
# tuple 也是一个list，唯一区别是 tuple 不可变。因此，tuple也可以切片操作，只是操作的结果仍是 tuple
T = (0,1,2,3,4,5)
print(T[:3])
# 字符串 ‘xxx’ 也可以看成是一种 list ，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作
# 结果仍是字符串：
s = 'ABCDEFG' ### 给变量赋值字符串，变量名不能用大写
print(s[:3])
print(s[::2])
# 在很多编程语言中，针对字符串提供了很多各种截取函数 ( 例如， substring ),其实目的就是对字符串切片。
# python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。

# 练习
# 利用切片操作，实现一个 trim() 函数，去除字符串首尾的空格，注意不要调用 str 的 strip() 方法：
def trim(s):
    if ' ' in s[0]:
        print(s[1:])
    return s
trim('  hello ')




